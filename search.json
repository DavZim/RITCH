[{"path":"https://davzim.github.io/RITCH/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 David Zimmermann-Kollenda Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davzim.github.io/RITCH/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Zimmermann-Kollenda. Author, maintainer.","code":""},{"path":"https://davzim.github.io/RITCH/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zimmermann-Kollenda D (2023). RITCH: R Parser ITCH-Protocol. https://davzim.github.io/RITCH/, https://github.com/DavZim/RITCH.","code":"@Manual{,   title = {RITCH: R Parser for the ITCH-Protocol},   author = {David Zimmermann-Kollenda},   year = {2023},   note = {https://davzim.github.io/RITCH/, https://github.com/DavZim/RITCH}, }"},{"path":"https://davzim.github.io/RITCH/index.html","id":"ritch---an-r-interface-to-the-itch-protocol","dir":"","previous_headings":"","what":"R Parser for the ITCH-Protocol","title":"R Parser for the ITCH-Protocol","text":"RITCH library provides R interface NASDAQs ITCH protocol, used distribute financial messages participants. Messages include orders, trades, market status, much financial information. full list messages shown later. main purpose package parse binary ITCH files data.table R. package leverages Rcpp C++ efficient message parsing. Note package provides small simulated sample dataset ITCH_50 format testing example purposes. Helper functions provided list download sample files NASDAQs official server.","code":""},{"path":"https://davzim.github.io/RITCH/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"R Parser for the ITCH-Protocol","text":"install RITCH can use following","code":"# stable version: install.packages(\"RITCH\")  # development version: # install.packages(\"remotes\") remotes::install_github(\"DavZim/RITCH\")"},{"path":"https://davzim.github.io/RITCH/index.html","id":"quick-overview","dir":"","previous_headings":"","what":"Quick Overview","title":"R Parser for the ITCH-Protocol","text":"main functions RITCH read-related easily identified read_ prefix. Due inherent structural differences message classes, class read function. list message types respective classes provided later Readme. Example message classes used example orders trades. First define file load count messages, read orders first 100 trades Note file can plain ITCH_50 file gzipped ITCH_50.gz file, decompressed current directory. may also note output reports quite low read speed MB/s. lowish number due including parsing process, furthermore, due overhead setup code, number gets higher larger files. want know functions package, read .","code":"library(RITCH) # use built in example dataset file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  # count the number of messages in the file msg_count <- count_messages(file) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 440.40MB/s dim(msg_count) #> [1] 22  2 names(msg_count) #> [1] \"msg_type\" \"count\"  # read the orders into a data.table orders <- read_orders(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.08 secs at 5.63MB/s dim(orders) #> [1] 5000   13 names(orders) #>  [1] \"msg_type\"        \"stock_locate\"    \"tracking_number\" \"timestamp\"       \"order_ref\"       \"buy\"             #>  [7] \"shares\"          \"stock\"           \"price\"           \"mpid\"            \"date\"            \"datetime\"        #> [13] \"exchange\"  # read the first 100 trades trades <- read_trades(file, n_max = 100) #> [Note]       n_max overrides counting the messages. Number of messages may be off #> [Filter]     skip: 0 n_max: 100 (1 - 100) #> [Counting]   num 'trades' messages 300 #> [Converting] to data.table #> [Done]       in 0.05 secs at 8.86MB/s dim(trades) #> [1] 100  14 names(trades) #>  [1] \"msg_type\"        \"stock_locate\"    \"tracking_number\" \"timestamp\"       \"order_ref\"       \"buy\"             #>  [7] \"shares\"          \"stock\"           \"price\"           \"match_number\"    \"cross_type\"      \"date\"            #> [13] \"datetime\"        \"exchange\""},{"path":"https://davzim.github.io/RITCH/index.html","id":"main-functions","dir":"","previous_headings":"","what":"Main Functions","title":"R Parser for the ITCH-Protocol","text":"RITCH provides following main functions: read_itch(file, ...) read ITCH file Convenient wrappers different message classes orders, trades, etc also provided read_orders(), read_trades(), … filter_itch(infile, outfile, ...) filter ITCH file write directly another file without loading data R write_itch(data, file, ...) write dataset ITCH file also helper functions provided, selection : download_sample_file(choice) download sample file NASDAQ server list_sample_files() get list available sample files download_stock_directory(exchange, date) download stock locate information given exchange date open_itch_sample_server() open official NASDAQ server browser, hosts among things example data files gzip_file(infile, outfile) gunzip_file(infile, outfile) gzip functionality open_itch_specification() open official NASDAQ ITCH specification PDF browser","code":""},{"path":"https://davzim.github.io/RITCH/index.html","id":"writing-itch-files","dir":"","previous_headings":"","what":"Writing ITCH Files","title":"R Parser for the ITCH-Protocol","text":"RITCH also provides functionality writing ITCH files. Although stored file formats (example database qs file), ITCH files quite optimized regarding size well write/read speeds. Thus write_itch() function allows write single multiple types message ITCH_50 file. Note however, standard columns supported. Additional columns written file! Additional information can saved filename. default date, exchange, fileformat information added filename unless specify add_meta = FALSE, case given name used. last note: write data ITCH file want filter stocks later , make sure save stock directory day/exchange, either externally ITCH file directly (see example ).","code":""},{"path":"https://davzim.github.io/RITCH/index.html","id":"simple-write-example","dir":"","previous_headings":"Writing ITCH Files","what":"Simple Write Example","title":"R Parser for the ITCH-Protocol","text":"simple write example read modifications ITCH file save separate file save space, reduce read times later , etc.","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") md <- read_modifications(file, quiet = TRUE) dim(md) #> [1] 2000   13 names(md) #>  [1] \"msg_type\"        \"stock_locate\"    \"tracking_number\" \"timestamp\"       \"order_ref\"       \"shares\"          #>  [7] \"match_number\"    \"printable\"       \"price\"           \"new_order_ref\"   \"date\"            \"datetime\"        #> [13] \"exchange\"  outfile <- write_itch(md, \"modifications\", compress = TRUE) #> [Counting]   2,000 messages (44,748 bytes) found #> [Converting] to binary . #> [Writing]    to file #> [Outfile]    'modifications_20101224.TEST_ITCH_50.gz' #> [Done]       in 0.01 secs at 2.36MB/s  # compare file sizes files <- c(full_file = file, subset_file = outfile) format_bytes(sapply(files, file.size)) #>   full_file subset_file  #>  \"465.05KB\"   \"23.95KB\""},{"path":"https://davzim.github.io/RITCH/index.html","id":"comprehensive-write-example","dir":"","previous_headings":"Writing ITCH Files","what":"Comprehensive Write Example","title":"R Parser for the ITCH-Protocol","text":"typical work flow look like : read message classes file filter certain stocks save results later analysis, also compress save disk space comparison, format qs format results 44788 bytes.","code":"## Read in the different message classes file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  # read in the different message types data <- read_itch(file,                   c(\"system_events\", \"stock_directory\", \"orders\"),                   filter_stock_locate = c(1, 3),                   quiet = TRUE)  str(data, max.level = 1) #> List of 2 #>  $ stock_directory:Classes 'data.table' and 'data.frame':    2 obs. of  21 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ orders         :Classes 'data.table' and 'data.frame':    2518 obs. of  13 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>   ## Write the different message classes outfile <- write_itch(data,                       \"alc_char_subset\",                       compress = TRUE) #> [Counting]   2,520 messages (95,766 bytes) found #> [Converting] to binary . #> [Writing]    to file #> [Outfile]    'alc_char_subset_20101224.TEST_ITCH_50.gz' #> [Done]       in 0.01 secs at 2.96MB/s outfile #> [1] \"alc_char_subset_20101224.TEST_ITCH_50.gz\"  # compare file sizes format_bytes(   sapply(c(full_file = file, subset_file = outfile),          file.size) ) #>   full_file subset_file  #>  \"465.05KB\"   \"37.89KB\"   ## Lastly, compare the two datasets to see if they are identical data2 <- read_itch(outfile, quiet = TRUE) all.equal(data, data2) #> [1] TRUE"},{"path":"https://davzim.github.io/RITCH/index.html","id":"itch-messages","dir":"","previous_headings":"","what":"ITCH Messages","title":"R Parser for the ITCH-Protocol","text":"total 22 different message types grouped 13 classes RITCH. messages respective classes : Note interested exact definition messages components, look official ITCH specification, can also opened calling open_itch_specification().","code":""},{"path":"https://davzim.github.io/RITCH/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"R Parser for the ITCH-Protocol","text":"RITCH package provides small, artificial dataset ITCH format example test purposes. learn dataset check ?ex20101224.TEST_ITCH_50. access dataset use: Note example dataset contain messages classes limited 6 system messages, 3 stock directory, 3 stock trading action, 5000 trade, 5000 order, 2000 order modification messages. seen 3 stock directory messages, file contains data 3 made stocks (see also plot later Readme). MASDAQ provides sample ITCH files official server https://emi.nasdaq.com/ITCH/Nasdaq%20ITCH/ (R use open_itch_sample_server()) can used test code larger datasets. Note sample files 5GB compressed, inflate 13GB. interact sample files, use list_sample_files() download_sample_files().","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") count_messages(file, add_meta_data = TRUE, quiet = TRUE) #>     msg_type count                 msg_class                                  msg_name  doc_nr #>  1:        S     6             system_events                      System Event Message     4.1 #>  2:        R     3           stock_directory                           Stock Directory   4.2.1 #>  3:        H     3            trading_status                      Stock Trading Action   4.2.2 #>  4:        Y     0                   reg_sho                       Reg SHO Restriction   4.2.3 #>  5:        L     0 market_participant_states               Market Participant Position   4.2.4 #>  6:        V     0                      mwcb                MWCB Decline Level Message 4.2.5.1 #>  7:        W     0                      mwcb                       MWCB Status Message 4.2.5.2 #>  8:        K     0                       ipo                 IPO Quoting Period Update   4.2.6 #>  9:        J     0                      luld                       LULD Auction Collar   4.2.7 #> 10:        h     0            trading_status                          Operational Halt   4.2.8 #> 11:        A  4997                    orders                         Add Order Message   4.3.1 #> 12:        F     3                    orders      Add Order - MPID Attribution Message   4.3.2 #> 13:        E   198             modifications                    Order Executed Message   4.4.1 #> 14:        C     0             modifications Order Executed Message With Price Message   4.4.2 #> 15:        X    45             modifications                      Order Cancel Message   4.4.3 #> 16:        D  1745             modifications                      Order Delete Message   4.4.4 #> 17:        U    12             modifications                     Order Replace Message   4.4.5 #> 18:        P  5000                    trades                 Trade Message (Non-Cross)   4.5.1 #> 19:        Q     0                    trades                       Cross Trade Message   4.5.2 #> 20:        B     0                    trades                      Broken Trade Message   4.5.3 #> 21:        I     0                      noii                              NOII Message     4.6 #> 22:        N     0                      rpii                   Retail Interest Message     4.7 #>     msg_type count                 msg_class                                  msg_name  doc_nr"},{"path":"https://davzim.github.io/RITCH/index.html","id":"notes-on-memory-and-speed","dir":"","previous_headings":"","what":"Notes on Memory and Speed","title":"R Parser for the ITCH-Protocol","text":"tweaks available deal memory speed issues. faster reading speeds, can increase buffer size read_ functions something around 1 GB (buffer_size = 1e9).","code":""},{"path":"https://davzim.github.io/RITCH/index.html","id":"provide-message-counts","dir":"","previous_headings":"Notes on Memory and Speed","what":"Provide Message Counts","title":"R Parser for the ITCH-Protocol","text":"read single file multiple times, example want extract orders trades, can count messages beforehand provide read’s n_max argument, reducing need pass file counting number messages.","code":"# count messages once n_msgs <- count_messages(file, quiet = TRUE)  # use counted messages multiple times, saving file passes orders <- read_orders(file, quiet = TRUE, n_max = n_msgs) trades <- read_trades(file, quiet = TRUE, n_max = n_msgs)"},{"path":"https://davzim.github.io/RITCH/index.html","id":"batch-read","dir":"","previous_headings":"Notes on Memory and Speed","what":"Batch Read","title":"R Parser for the ITCH-Protocol","text":"dataset fit entirely RAM, can partial read specifying skip n_max, similar :","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  n_messages <- count_orders(count_messages(file, quiet = TRUE)) n_messages #> [1] 5000  # read 1000 messages at a time n_batch <- 1000 n_parsed <- 0  while (n_parsed < n_messages) {   cat(sprintf(\"Parsing Batch %04i - %04i\", n_parsed, n_parsed + n_batch))   # read in a batch   df <- read_orders(file, quiet = TRUE, skip = n_parsed, n_max = n_batch)   cat(sprintf(\": with %04i orders\\n\", nrow(df)))   # use the data   # ...   n_parsed <- n_parsed + n_batch } #> Parsing Batch 0000 - 1000: with 1000 orders #> Parsing Batch 1000 - 2000: with 1000 orders #> Parsing Batch 2000 - 3000: with 1000 orders #> Parsing Batch 3000 - 4000: with 1000 orders #> Parsing Batch 4000 - 5000: with 1000 orders"},{"path":"https://davzim.github.io/RITCH/index.html","id":"filter-when-reading-data","dir":"","previous_headings":"Notes on Memory and Speed","what":"Filter when Reading Data","title":"R Parser for the ITCH-Protocol","text":"can also filter dataset directly reading messages msg_type, stock_locate, timestamp range, well stock. Note filtering specific stock, just shorthand lookup stocks’ stock_locate code, therefore stock_directory needs supplied (either providing output read_stock_directory() download_stock_locate()) function try extract stock directory file (might take time depending size file).","code":"# read in the stock directory as we filter for stock names later on sdir <- read_stock_directory(file, quiet = TRUE)  od <- read_orders(   file,   filter_msg_type = \"A\",          # take only 'No MPID add orders'   min_timestamp = 43200000000000, # start at 12:00:00.000000   max_timestamp = 55800000000000, # end at 15:30:00.000000   filter_stock_locate = 1,        # take only stock with code 1   filter_stock = \"CHAR\",          # but also take stock CHAR   stock_directory = sdir          # provide the stock_directory to match stock names to stock_locates ) #> [Filter]     msg_type: 'A' #> [Filter]     timestamp: 43200000000000 - 55800000000000  #> [Filter]     stock_locate: '1', '3' #> NOTE: as filter arguments were given, the number of messages may be off #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.07 secs at 7.12MB/s  # count the different message types od[, .(n = .N), by = msg_type] #>    msg_type    n #> 1:        A 1082 # see if the timestamp is in the specified range range(od$timestamp) #> integer64 #> [1] 43235810473334 55792143963723 # count the stock/stock-locate codes od[, .(n = .N), by = .(stock_locate, stock)] #>    stock_locate stock   n #> 1:            3  CHAR 574 #> 2:            1   ALC 508"},{"path":"https://davzim.github.io/RITCH/index.html","id":"filter-data-to-file","dir":"","previous_headings":"Notes on Memory and Speed","what":"Filter Data to File","title":"R Parser for the ITCH-Protocol","text":"larger files, reading data memory might best idea, especially small subset actually needed. case, filter_itch function come handy. basic design identical read_itch function instead reading messages memory, immediately written file. Taking filter data example , can following","code":"# the function returns the final name of the output file outfile <- filter_itch(   infile = file,   outfile = \"filtered\",   filter_msg_type = \"A\",          # take only 'No MPID add orders'   min_timestamp = 43200000000000, # start at 12:00:00.000000   max_timestamp = 55800000000000, # end at 15:30:00.000000   filter_stock_locate = 1,        # take only stock with code 1   filter_stock = \"CHAR\",          # but also take stock CHAR   stock_directory = sdir          # provide the stock_directory to match stock names to stock_locates ) #> [Filter]     msg_type: 'A' #> [Filter]     timestamp: 43200000000000 - 55800000000000  #> [Filter]     stock_locate: '1', '3' #> [Bytes]      scanned 465048, filtered 41116 #> [Messages]   scanned 10979, filtered 1082 #> [Done]       in 0.06 secs at 8.19MB/s  format_bytes(file.size(outfile)) #> [1] \"41.12KB\"  # read in the orders from the filtered file od2 <- read_orders(outfile) #> [Counting]   num messages 1,082 #> [Counting]   num 'orders' messages 1,082 #> [Converting] to data.table #> [Done]       in 0.06 secs at 679.67KB/s  # check that the filtered dataset contains the same information as in the example above all.equal(od, od2) #> [1] TRUE"},{"path":"https://davzim.github.io/RITCH/index.html","id":"create-a-plot-with-trades-and-orders-of-the-largest-etfs","dir":"","previous_headings":"","what":"Create a Plot with Trades and Orders of the largest ETFs","title":"R Parser for the ITCH-Protocol","text":"last step, quick visualization example dataset","code":"library(ggplot2) #> Warning: Paket 'ggplot2' wurde unter R Version 4.2.2 erstellt  file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  # load the data orders <- read_orders(file, quiet = TRUE) trades <- read_trades(file, quiet = TRUE)  # replace the buy-factor with something more useful orders[, buy := ifelse(buy, \"Bid\", \"Ask\")]  ggplot() +   geom_point(data = orders,              aes(x = as.POSIXct(datetime), y = price, color = buy), alpha = 0.2) +   geom_step(data = trades, aes(x = as.POSIXct(datetime), y = price), size = 0.2) +   facet_grid(stock~., scales = \"free_y\") +   theme_light() +   labs(title = \"Orders and Trades of Three Simulated Stocks\",        subtitle = \"Date: 2010-12-24 | Exchange: TEST\",        caption = \"Source: RITCH package\", x = \"Time\", y = \"Price\", color = \"Side\") +   scale_y_continuous(labels = scales::dollar) +   scale_color_brewer(palette = \"Set1\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead."},{"path":"https://davzim.github.io/RITCH/index.html","id":"other-notes","dir":"","previous_headings":"","what":"Other Notes","title":"R Parser for the ITCH-Protocol","text":"find package useful kind feedback, ’d happy let know. Otherwise, need functionality, please feel free create issue pull request. Citation CRAN release WIP. interested gaining better understanding internal data structures, converting data binary, look debug folder contents (available RITCH’s Github page).","code":""},{"path":"https://davzim.github.io/RITCH/reference/add_meta_to_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","title":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","text":"Note date exchange information already present, overwritten","code":""},{"path":"https://davzim.github.io/RITCH/reference/add_meta_to_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","text":"","code":"add_meta_to_filename(file, date, exchange)"},{"path":"https://davzim.github.io/RITCH/reference/add_meta_to_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","text":"file filename date date date-class string understood base::.Date(). exchange name exchange","code":""},{"path":"https://davzim.github.io/RITCH/reference/add_meta_to_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","text":"filename exchanged added date exchange information","code":""},{"path":"https://davzim.github.io/RITCH/reference/add_meta_to_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds meta information (date and exchange) to an itch filename — add_meta_to_filename","text":"","code":"add_meta_to_filename(\"03302017.NASDAQ_ITCH50\", \"2010-12-24\", \"TEST\") #> [1] \"12242010.TEST_ITCH50\" add_meta_to_filename(\"20170130.BX_ITCH_50.gz\", \"2010-12-24\", \"TEST\") #> [1] \"20101224.TEST_ITCH_50.gz\" add_meta_to_filename(\"S030220-v50-bx.txt.gz\", \"2010-12-24\", \"TEST\") #> [1] \"S122410-v50-TEST.txt.gz\" add_meta_to_filename(\"unknown_file.ITCH_50\", \"2010-12-24\", \"TEST\") #> [1] \"unknown_file_20101224.TEST_ITCH_50\""},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the messages of an ITCH-file — count_functions","title":"Counts the messages of an ITCH-file — count_functions","text":"Counts messages ITCH-file","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the messages of an ITCH-file — count_functions","text":"","code":"count_messages(   file,   add_meta_data = FALSE,   buffer_size = -1,   quiet = FALSE,   force_gunzip = FALSE,   force_cleanup = TRUE )  count_orders(x)  count_trades(x)  count_modifications(x)  count_system_events(x)  count_stock_directory(x)  count_trading_status(x)  count_reg_sho(x)  count_market_participant_states(x)  count_mwcb(x)  count_ipo(x)  count_luld(x)  count_noii(x)  count_rpii(x)"},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the messages of an ITCH-file — count_functions","text":"file path input file, either gz-file plain-text file add_meta_data meta-data messages added, defaults FALSE buffer_size size buffer bytes, defaults 1e8 (100 MB), large amount RAM, 1e9 (1GB) might faster quiet TRUE, status messages supressed, defaults FALSE force_gunzip applies file gz-file file (gunzipped) name already exists. set TRUE, existing file overwritten. Default value FALSE force_cleanup applies file gz-file. force_cleanup=TRUE, gunzipped raw file deleted afterwards. x file data.table containing message types counts, outputted count_messages","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the messages of an ITCH-file — count_functions","text":"data.table containing message-type counts count_messages integer value functions.","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counts the messages of an ITCH-file — count_functions","text":"count_orders: Counts order messages. Message type F count_trades: Counts trade messages. Message type P, Q B count_modifications: Counts order modification messages. Message type E, C, X, D, U count_system_events: Counts system event messages. Message type S count_stock_directory: Counts stock trading messages. Message type R count_trading_status: Counts trading status messages. Message type H h count_reg_sho: Counts messages regarding reg SHO. Message type Y count_market_participant_states: Counts messages regarding status market participants. Message type L count_mwcb: Counts messages regarding Market-Wide-Circuit-Breakers (MWCB). Message type V W count_ipo: Counts messages regarding IPOs. Message type K count_luld: Counts messages regarding LULDs (limit -limit ) auction collars. Message type J count_noii: Counts Net Order Imbalance Indicatio (NOII) messages. Message type count_rpii: Counts Retail Price Improvement Indicator (RPII) messages. Message type N","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the messages of an ITCH-file — count_functions","text":"","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") count_messages(file) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 372.10MB/s #>     msg_type count #>  1:        S     6 #>  2:        R     3 #>  3:        H     3 #>  4:        Y     0 #>  5:        L     0 #>  6:        V     0 #>  7:        W     0 #>  8:        K     0 #>  9:        J     0 #> 10:        h     0 #> 11:        A  4997 #> 12:        F     3 #> 13:        E   198 #> 14:        C     0 #> 15:        X    45 #> 16:        D  1745 #> 17:        U    12 #> 18:        P  5000 #> 19:        Q     0 #> 20:        B     0 #> 21:        I     0 #> 22:        N     0 #>     msg_type count count_messages(file, add_meta_data = TRUE) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.01 secs at 32.81MB/s #>     msg_type count                 msg_class #>  1:        S     6             system_events #>  2:        R     3           stock_directory #>  3:        H     3            trading_status #>  4:        Y     0                   reg_sho #>  5:        L     0 market_participant_states #>  6:        V     0                      mwcb #>  7:        W     0                      mwcb #>  8:        K     0                       ipo #>  9:        J     0                      luld #> 10:        h     0            trading_status #> 11:        A  4997                    orders #> 12:        F     3                    orders #> 13:        E   198             modifications #> 14:        C     0             modifications #> 15:        X    45             modifications #> 16:        D  1745             modifications #> 17:        U    12             modifications #> 18:        P  5000                    trades #> 19:        Q     0                    trades #> 20:        B     0                    trades #> 21:        I     0                      noii #> 22:        N     0                      rpii #>     msg_type count                 msg_class #>                                      msg_name  doc_nr #>  1:                      System Event Message     4.1 #>  2:                           Stock Directory   4.2.1 #>  3:                      Stock Trading Action   4.2.2 #>  4:                       Reg SHO Restriction   4.2.3 #>  5:               Market Participant Position   4.2.4 #>  6:                MWCB Decline Level Message 4.2.5.1 #>  7:                       MWCB Status Message 4.2.5.2 #>  8:                 IPO Quoting Period Update   4.2.6 #>  9:                       LULD Auction Collar   4.2.7 #> 10:                          Operational Halt   4.2.8 #> 11:                         Add Order Message   4.3.1 #> 12:      Add Order - MPID Attribution Message   4.3.2 #> 13:                    Order Executed Message   4.4.1 #> 14: Order Executed Message With Price Message   4.4.2 #> 15:                      Order Cancel Message   4.4.3 #> 16:                      Order Delete Message   4.4.4 #> 17:                     Order Replace Message   4.4.5 #> 18:                 Trade Message (Non-Cross)   4.5.1 #> 19:                       Cross Trade Message   4.5.2 #> 20:                      Broken Trade Message   4.5.3 #> 21:                              NOII Message     4.6 #> 22:                   Retail Interest Message     4.7 #>                                      msg_name  doc_nr  gz_file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50.gz\", package = \"RITCH\") count_messages(gz_file) #> [INFO] Unzipped file '/home/runner/work/_temp/Library/RITCH/extdata/ex20101224.TEST_ITCH_50' already found, using that (overwrite with force_gunzip=TRUE) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 199.15MB/s #> [Cleanup]    Removing file '/home/runner/work/_temp/Library/RITCH/extdata/ex20101224.TEST_ITCH_50' #>     msg_type count #>  1:        S     6 #>  2:        R     3 #>  3:        H     3 #>  4:        Y     0 #>  5:        L     0 #>  6:        V     0 #>  7:        W     0 #>  8:        K     0 #>  9:        J     0 #> 10:        h     0 #> 11:        A  4997 #> 12:        F     3 #> 13:        E   198 #> 14:        C     0 #> 15:        X    45 #> 16:        D  1745 #> 17:        U    12 #> 18:        P  5000 #> 19:        Q     0 #> 20:        B     0 #> 21:        I     0 #> 22:        N     0 #>     msg_type count  # count only a specific class msg_count <- count_messages(file) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 1.11GB/s  # either count based on a given data.table outputted by count_messages count_orders(msg_count) #> [1] 5000  # or count messages in a file count_orders(file) #> [1] 5000  ### Specific class count functions are: count_orders(msg_count) #> [1] 5000 count_trades(msg_count) #> [1] 5000 count_modifications(msg_count) #> [1] 2000 count_system_events(msg_count) #> [1] 6 count_stock_directory(msg_count) #> [1] 3 count_trading_status(msg_count) #> [1] 3 count_reg_sho(msg_count) #> [1] 0 count_market_participant_states(msg_count) #> [1] 0 count_mwcb(msg_count) #> [1] 0 count_ipo(msg_count) #> [1] 0 count_luld(msg_count) #> [1] 0 count_noii(msg_count) #> [1] 0 count_rpii(msg_count) #> [1] 0"},{"path":"https://davzim.github.io/RITCH/reference/count_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to count the messages — count_internal","title":"Internal function to count the messages — count_internal","text":"Internal function count messages","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to count the messages — count_internal","text":"","code":"count_internal(x, types)"},{"path":"https://davzim.github.io/RITCH/reference/count_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to count the messages — count_internal","text":"x data.frame containing message types counts types vector containing types","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to count the messages — count_internal","text":"numeric value number orders x","code":""},{"path":"https://davzim.github.io/RITCH/reference/count_internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function to count the messages — count_internal","text":"","code":"# Only used internally"},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"Server can found https://emi.nasdaq.com/ITCH/Nasdaq%20ITCH/","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"","code":"download_sample_file(   choice = c(\"smallest\", \"largest\", \"earliest\", \"latest\", \"random\", \"all\"),   file = NA,   exchanges = NA,   dir = \".\",   force_download = FALSE,   check_md5sum = TRUE,   quiet = FALSE )"},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"choice file chosen? One : smallest (default), largest, earliest (date-wise), latest, random, . file name specific file, overrules choice exchanges arguments exchanges vector exchanges, can NASDAQ, BX, PSX. default value consider exchanges. dir directory files saved , default current working directory. force_download file downloaded even already exists locally. Default value FALSE. check_md5sum md5-sum (hash-value) downloaded file checked, default value TRUE. quiet TRUE, status messages suppressed, defaults FALSE","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"invisible vector files","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"Warning: smallest file around 300 MB, largest exceeding 5 GB. 17 files total. Downloading might take considerable amount time.","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_sample_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads a sample ITCH File from NASDAQs Server — download_sample_file","text":"","code":"if (FALSE) { download_sample_file() file <- download_sample_file() file  # download a specific sample file file <- download_sample_file(file = \"2019130.BX_ITCH_50.gz\") file }"},{"path":"https://davzim.github.io/RITCH/reference/download_stock_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","title":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","text":"data downloaded NASDAQs server, can found https://emi.nasdaq.com/ITCH/Stock_Locate_Codes/","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_stock_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","text":"","code":"download_stock_directory(exchange, date, cache = FALSE, quiet = FALSE)"},{"path":"https://davzim.github.io/RITCH/reference/download_stock_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","text":"exchange exchange, either NASDAQ (equivalent NDQ), BX, PSX date date, class Date. value converted using .Date. cache stock directory cached, can set TRUE save stock directories working directory character target directory. quiet download function quiet, default FALSE.","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_stock_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","text":"data.table tickers, respective stock locate codes, exchange/date information","code":""},{"path":"https://davzim.github.io/RITCH/reference/download_stock_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads the stock directory (stock locate codes) for a given date and exchange — download_stock_directory","text":"","code":"if (FALSE) {   download_stock_directory(\"BX\", \"2019-07-02\")   download_stock_directory(c(\"BX\", \"NDQ\"), c(\"2019-07-02\", \"2019-07-03\"))   download_stock_directory(\"BX\", \"2019-07-02\", cache = TRUE)    download_stock_directory(\"BX\", \"2019-07-02\", cache = \"stock_directory\")   dir.exists(\"stock_directory\")   list.files(\"stock_directory\") }"},{"path":"https://davzim.github.io/RITCH/reference/ex20101224.TEST_ITCH_50.html","id":null,"dir":"Reference","previous_headings":"","what":"ITCH 50 Example Testing Dataset — ex20101224.TEST_ITCH_50","title":"ITCH 50 Example Testing Dataset — ex20101224.TEST_ITCH_50","text":"ITCH 50 Example Testing Dataset","code":""},{"path":"https://davzim.github.io/RITCH/reference/ex20101224.TEST_ITCH_50.html","id":"ex-test-itch-","dir":"Reference","previous_headings":"","what":"ex20101224.TEST_ITCH_50","title":"ITCH 50 Example Testing Dataset — ex20101224.TEST_ITCH_50","text":"test dataset contains artificial trading data three made stocks: ALC, BOB, CHAR. dataset used examples unit tests package. data contains following count messages: 6 system event (message type S) 3 stock directory (message type R) 3 trading status (message type H) 5000 orders (4997 message type 3 F) 2000 modifications (198 F, 45 X, 1745 D, 12 U message types) 5000 trades (message type P) file also available ex20101224.TEST_ITCH_50.gz. get real sample ITCH datasets, see download_sample_file() function.","code":""},{"path":"https://davzim.github.io/RITCH/reference/ex20101224.TEST_ITCH_50.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ITCH 50 Example Testing Dataset — ex20101224.TEST_ITCH_50","text":"","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  sys <- read_system_events(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'system_events' messages 6 #> [Converting] to data.table #> [Done]       in 0.22 secs at 2.12MB/s"},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters an ITCH file to another ITCH file — filter_itch","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"function allows perform fast filter operations large ITCH files. messages written another ITCH file.","code":""},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"","code":"filter_itch(   infile,   outfile,   filter_msg_class = NA_character_,   filter_msg_type = NA_character_,   filter_stock_locate = NA_integer_,   min_timestamp = bit64::as.integer64(NA),   max_timestamp = bit64::as.integer64(NA),   filter_stock = NA_character_,   stock_directory = NA,   skip = 0,   n_max = -1,   append = FALSE,   overwrite = FALSE,   gz = FALSE,   buffer_size = -1,   quiet = FALSE,   force_gunzip = FALSE,   force_cleanup = TRUE )"},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"infile input file messages taken , can gz-archive plain ITCH file. outfile output file filtered messages written . Note date exchange information infile used, see also add_meta_to_filename() information. filter_msg_class vector classes load, can \"orders\", \"trades\", \"modifications\", ... see also get_msg_classes(). Default value take message classes. filter_msg_type character vector, specifying filter message types. Note can used return '' orders instance. filter_stock_locate integer vector, specifying filter locate codes. locate codes can looked calling read_stock_directory() downloading NASDAQ using download_stock_directory(). Note message types (e.g., system events, MWCB, IPO) use locate code. min_timestamp 64 bit integer vector (see also bit64::.integer64()) minimum timestamp (inclusive). Note: min max timestamp must supplied length left empty. max_timestamp 64 bit integer vector (see also bit64::.integer64()) maxium timestamp (inclusive). Note: min max timestamp must supplied length left empty. filter_stock character vector, specifying filter stocks. Note shorthand filter_stock_locate argument, tries find stock_locate based stock_directory argument, found, try extract stock directory file, else error thrown. stock_directory data.frame containing stock-locate code relationship. outputted read_stock_directory(). used filter_stock set. download stock directory NASDAQs server, use download_stock_directory(). skip Number messages skip starting parsing messages, note skip parameter applies specific message class, .e., skip messages type (e.g., skip first 10 messages class). n_max Maximum number messages parse, default read values. Can also data.frame msg_types counts, returned count_messages(). Note n_max parameter applies specific message class whole file. append messages appended outfile, default false. Note, helpful skip n_max used batch filtering. overwrite existing outfile name overwritten. Default value false gz output file gzip-compressed. Note name output file appended .gz already present. final output name returned. Default value false. buffer_size size buffer bytes, defaults 1e8 (100 MB), large amount RAM, 1e9 (1GB) might faster quiet TRUE, status messages suppressed, defaults FALSE force_gunzip applies input file gz-archive file (gunzipped) name already exists. set TRUE, existing file overwritten. Default value FALSE force_cleanup applies input file gz-archive. force_cleanup=TRUE, gunzipped raw file deleted afterwards. applies gunzipped raw file exist .","code":""},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"name output file (maybe different inputted outfile due adding date exchange), silently","code":""},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"Note can especially useful larger files memory large enough filter datalimits analysis. read_itch() functions, allows filter msg_class, msg_type, stock_locate/stock, timestamp.","code":""},{"path":"https://davzim.github.io/RITCH/reference/filter_itch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters an ITCH file to another ITCH file — filter_itch","text":"","code":"infile <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") outfile <- tempfile(fileext = \"_20101224.TEST_ITCH_50\") filter_itch(   infile, outfile,   filter_msg_class = c(\"orders\", \"trades\"),   filter_msg_type = \"R\", # stock_directory   skip = 0, n_max = 100 ) #> [Filter]     skip: 0 n_max: 100 (1 - 100) #> [Filter]     msg_type: 'R', 'A', 'F', 'P', 'Q', 'B' #> [Bytes]      scanned 465048, filtered 8527 #> [Messages]   scanned 12012, filtered 203 #> [Done]       in 0.20 secs at 2.30MB/s  # expecting 100 orders, 100 trades, and 3 stock_directory entries count_messages(outfile) #> [Counting]   203 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 26.36MB/s #>     msg_type count #>  1:        S     0 #>  2:        R     3 #>  3:        H     0 #>  4:        Y     0 #>  5:        L     0 #>  6:        V     0 #>  7:        W     0 #>  8:        K     0 #>  9:        J     0 #> 10:        h     0 #> 11:        A    99 #> 12:        F     1 #> 13:        E     0 #> 14:        C     0 #> 15:        X     0 #> 16:        D     0 #> 17:        U     0 #> 18:        P   100 #> 19:        Q     0 #> 20:        B     0 #> 21:        I     0 #> 22:        N     0 #>     msg_type count  # check that the output file contains the same res  <- read_itch(outfile, c(\"orders\", \"trades\", \"stock_directory\")) #> [Counting]   num messages 203 #> [Counting]   num 'stock_directory' messages 3 #> [Counting]   num 'orders' messages 100 #> [Counting]   num 'trades' messages 100 #> [Converting] to data.table #> [Done]       in 0.21 secs at 40.60KB/s sapply(res, nrow) #>          orders          trades stock_directory  #>             100             100               3   res2 <- read_itch(infile,  c(\"orders\", \"trades\", \"stock_directory\"),                   n_max = 100) #> [Note]       n_max overrides counting the messages. Number of messages may be off #> [Filter]     skip: 0 n_max: 100 (1 - 100) #> [Counting]   num 'stock_directory' messages 100 #> [Counting]   num 'orders' messages 200 #> [Counting]   num 'trades' messages 300 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.42MB/s  all.equal(res, res2) #> [1] TRUE"},{"path":"https://davzim.github.io/RITCH/reference/format_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats a number of bytes — format_bytes","title":"Formats a number of bytes — format_bytes","text":"Formats number bytes","code":""},{"path":"https://davzim.github.io/RITCH/reference/format_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats a number of bytes — format_bytes","text":"","code":"format_bytes(x, digits = 2, unit_suffix = \"B\", base = 1000)"},{"path":"https://davzim.github.io/RITCH/reference/format_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats a number of bytes — format_bytes","text":"x values digits number digits display, default value 2 unit_suffix unit suffix, default value 'B' (bytes), useful also 'B/s' read/write speeds base base kilo, mega, ... definition, default 1000","code":""},{"path":"https://davzim.github.io/RITCH/reference/format_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats a number of bytes — format_bytes","text":"values character","code":""},{"path":"https://davzim.github.io/RITCH/reference/format_bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats a number of bytes — format_bytes","text":"","code":"format_bytes(1234) #> [1] \"1.23KB\" format_bytes(1234567890) #> [1] \"1.23GB\" format_bytes(123456789012, unit_suffix = \"iB\", base = 1024) #> [1] \"114.98GiB\""},{"path":"https://davzim.github.io/RITCH/reference/get_date_from_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the date from an ITCH-filename — get_date_from_filename","title":"Returns the date from an ITCH-filename — get_date_from_filename","text":"Returns date ITCH-filename","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_date_from_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the date from an ITCH-filename — get_date_from_filename","text":"","code":"get_date_from_filename(file)"},{"path":"https://davzim.github.io/RITCH/reference/get_date_from_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the date from an ITCH-filename — get_date_from_filename","text":"file filename","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_date_from_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the date from an ITCH-filename — get_date_from_filename","text":"date fastPOSIXct","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_date_from_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the date from an ITCH-filename — get_date_from_filename","text":"","code":"get_date_from_filename(\"03302017.NASDAQ_ITCH50\") #> [1] \"2017-03-30 GMT\" get_date_from_filename(\"20170130.BX_ITCH_50.gz\") #> [1] \"2017-01-30 GMT\" get_date_from_filename(\"S030220-v50-bx.txt.gz\") #> [1] \"2020-03-02 GMT\" get_date_from_filename(\"unknown_file_format\") #> [1] NA"},{"path":"https://davzim.github.io/RITCH/reference/get_exchange_from_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","title":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","text":"Returns exchange ITCH-filename","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_exchange_from_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","text":"","code":"get_exchange_from_filename(file)"},{"path":"https://davzim.github.io/RITCH/reference/get_exchange_from_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","text":"file filename","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_exchange_from_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","text":"exchange","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_exchange_from_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the exchange from an ITCH-filename — get_exchange_from_filename","text":"","code":"get_exchange_from_filename(\"03302017.NASDAQ_ITCH50\") #> [1] \"NASDAQ\" get_exchange_from_filename(\"20170130.BX_ITCH_50.gz\") #> [1] \"BX\" get_exchange_from_filename(\"S030220-v50-bx.txt.gz\") #> [1] \"BX\" get_exchange_from_filename(\"Unknown_file_format\") #> [1] NA"},{"path":"https://davzim.github.io/RITCH/reference/get_msg_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the message class data for the message types — get_msg_classes","title":"Returns the message class data for the message types — get_msg_classes","text":"information handled according official ITCH 5.0 documentation found : http://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHSpecification.pdf","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_msg_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the message class data for the message types — get_msg_classes","text":"","code":"get_msg_classes()"},{"path":"https://davzim.github.io/RITCH/reference/get_msg_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the message class data for the message types — get_msg_classes","text":"data.table information message-types","code":""},{"path":"https://davzim.github.io/RITCH/reference/get_msg_classes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns the message class data for the message types — get_msg_classes","text":"msg_type type message msg_class group message belongs msg_name official name message doc_nr number message documentation","code":""},{"path":[]},{"path":"https://davzim.github.io/RITCH/reference/get_msg_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the message class data for the message types — get_msg_classes","text":"","code":"get_msg_classes() #>     msg_type                 msg_class #>  1:        S             system_events #>  2:        R           stock_directory #>  3:        H            trading_status #>  4:        Y                   reg_sho #>  5:        L market_participant_states #>  6:        V                      mwcb #>  7:        W                      mwcb #>  8:        K                       ipo #>  9:        J                      luld #> 10:        h            trading_status #> 11:        A                    orders #> 12:        F                    orders #> 13:        E             modifications #> 14:        C             modifications #> 15:        X             modifications #> 16:        D             modifications #> 17:        U             modifications #> 18:        P                    trades #> 19:        Q                    trades #> 20:        B                    trades #> 21:        I                      noii #> 22:        N                      rpii #>     msg_type                 msg_class #>                                      msg_name  doc_nr #>  1:                      System Event Message     4.1 #>  2:                           Stock Directory   4.2.1 #>  3:                      Stock Trading Action   4.2.2 #>  4:                       Reg SHO Restriction   4.2.3 #>  5:               Market Participant Position   4.2.4 #>  6:                MWCB Decline Level Message 4.2.5.1 #>  7:                       MWCB Status Message 4.2.5.2 #>  8:                 IPO Quoting Period Update   4.2.6 #>  9:                       LULD Auction Collar   4.2.7 #> 10:                          Operational Halt   4.2.8 #> 11:                         Add Order Message   4.3.1 #> 12:      Add Order - MPID Attribution Message   4.3.2 #> 13:                    Order Executed Message   4.4.1 #> 14: Order Executed Message With Price Message   4.4.2 #> 15:                      Order Cancel Message   4.4.3 #> 16:                      Order Delete Message   4.4.4 #> 17:                     Order Replace Message   4.4.5 #> 18:                 Trade Message (Non-Cross)   4.5.1 #> 19:                       Cross Trade Message   4.5.2 #> 20:                      Broken Trade Message   4.5.3 #> 21:                              NOII Message     4.6 #> 22:                   Retail Interest Message     4.7 #>                                      msg_name  doc_nr"},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compresses and uncompresses files to and from gz-archives — gz_functions","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"Allows compression uncompression files","code":""},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"","code":"gunzip_file(   infile,   outfile = gsub(\"\\\\.gz$\", \"\", infile),   buffer_size = min(4 * file.size(infile), 2e+09) )  gzip_file(   infile,   outfile = NA,   buffer_size = min(4 * file.size(infile), 2e+09) )"},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"infile file zipped unzipped outfile resulting zipped unzipped file buffer_size size buffer read , default 4 times file.size (max 2Gb).","code":""},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"filename unzipped file, invisibly","code":""},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"Functions gunzip_file: uncompresses gz-archive raw binary data -gzip_file: compresses raw binary data file gz-archive","code":""},{"path":"https://davzim.github.io/RITCH/reference/gz_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compresses and uncompresses files to and from gz-archives — gz_functions","text":"","code":"gzfile <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50.gz\", package = \"RITCH\") file   <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\")  # uncompress file (outfile <- gunzip_file(gzfile, \"tmp\")) #> [1] \"tmp\" file.info(outfile) #>       size isdir mode               mtime               ctime #> tmp 465048 FALSE  644 2023-07-18 08:07:08 2023-07-18 08:07:08 #>                   atime  uid gid  uname grname #> tmp 2023-07-18 08:07:08 1001 123 runner docker unlink(outfile)  # compress file (outfile <- gzip_file(file)) #> [1] \"ex20101224.TEST_ITCH_50.gz\" file.info(outfile) #>                              size isdir mode               mtime #> ex20101224.TEST_ITCH_50.gz 159965 FALSE  644 2023-07-18 08:07:08 #>                                          ctime               atime  uid gid #> ex20101224.TEST_ITCH_50.gz 2023-07-18 08:07:08 2023-07-18 08:07:08 1001 123 #>                             uname grname #> ex20101224.TEST_ITCH_50.gz runner docker unlink(outfile)"},{"path":"https://davzim.github.io/RITCH/reference/list_sample_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a data.table of the sample files on the server — list_sample_files","title":"Returns a data.table of the sample files on the server — list_sample_files","text":"Server can found https://emi.nasdaq.com/ITCH/Nasdaq%20ITCH/","code":""},{"path":"https://davzim.github.io/RITCH/reference/list_sample_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a data.table of the sample files on the server — list_sample_files","text":"","code":"list_sample_files()"},{"path":"https://davzim.github.io/RITCH/reference/list_sample_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a data.table of the sample files on the server — list_sample_files","text":"data.table files","code":""},{"path":"https://davzim.github.io/RITCH/reference/list_sample_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a data.table of the sample files on the server — list_sample_files","text":"","code":"if (FALSE) {   list_sample_files() }"},{"path":"https://davzim.github.io/RITCH/reference/open_itch_sample_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens the ITCH sample page — open_itch_sample_server","title":"Opens the ITCH sample page — open_itch_sample_server","text":"server can found https://emi.nasdaq.com/ITCH/Nasdaq%20ITCH/.","code":""},{"path":"https://davzim.github.io/RITCH/reference/open_itch_sample_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens the ITCH sample page — open_itch_sample_server","text":"","code":"open_itch_sample_server()"},{"path":"https://davzim.github.io/RITCH/reference/open_itch_sample_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opens the ITCH sample page — open_itch_sample_server","text":"URL (invisible)","code":""},{"path":"https://davzim.github.io/RITCH/reference/open_itch_sample_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opens the ITCH sample page — open_itch_sample_server","text":"","code":"if (FALSE) { open_itch_sample_server() }"},{"path":"https://davzim.github.io/RITCH/reference/open_itch_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Opens the ITCH Specification PDF — open_itch_specification","title":"Opens the ITCH Specification PDF — open_itch_specification","text":"specifications can found PDF https://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHspecification.pdf.","code":""},{"path":"https://davzim.github.io/RITCH/reference/open_itch_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Opens the ITCH Specification PDF — open_itch_specification","text":"","code":"open_itch_specification()"},{"path":"https://davzim.github.io/RITCH/reference/open_itch_specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Opens the ITCH Specification PDF — open_itch_specification","text":"URL (invisible)","code":""},{"path":"https://davzim.github.io/RITCH/reference/open_itch_specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Opens the ITCH Specification PDF — open_itch_specification","text":"","code":"if (FALSE) { open_itch_specification() }"},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads certain messages of an ITCH-file into a data.table — read_functions","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"faster file-reads (tradeoff increased memory usages), can increase buffer_size 1GB (1e9) . access file multiple times, can provide message counts outputted count_messages() n_max argument, allows skipping one pass file per read instruction. need read multiple message classes, can specify multiple message classes read_itch, results single file pass. file large loaded workspace , can specify different skip n_max load specific range messages. Alternatively, can filter certain messages another file using filter_itch(), substantially faster parsing file filtering . Note read functions allow plain ITCH files well gzipped files. gzipped file found, look plain ITCH file name use instead. file found, created unzipping archive. Note unzipped file deleted default (file created current working directory). might result increased disk usage reduces future read times specific file. force RITCH delete \"temporary\" files uncompressing, use force_cleanup = TRUE (deletes files extracted , remove archive ).","code":""},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"","code":"read_itch(   file,   filter_msg_class = NA,   skip = 0,   n_max = -1,   filter_msg_type = NA_character_,   filter_stock_locate = NA_integer_,   min_timestamp = bit64::as.integer64(NA),   max_timestamp = bit64::as.integer64(NA),   filter_stock = NA_character_,   stock_directory = NA,   buffer_size = -1,   quiet = FALSE,   add_meta = TRUE,   force_gunzip = FALSE,   force_cleanup = TRUE )  read_system_events(file, ..., add_descriptions = FALSE)  read_stock_directory(file, ..., add_descriptions = FALSE)  read_trading_status(file, ..., add_descriptions = FALSE)  read_reg_sho(file, ..., add_descriptions = FALSE)  read_market_participant_states(file, ..., add_descriptions = FALSE)  read_mwcb(file, ...)  read_ipo(file, ..., add_descriptions = FALSE)  read_luld(file, ...)  read_orders(file, ...)  read_modifications(file, ...)  read_trades(file, ...)  read_noii(file, ..., add_descriptions = FALSE)  read_rpii(file, ..., add_descriptions = FALSE)  get_orders(file, ...)  get_trades(file, ...)  get_modifications(file, ...)"},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"file path input file, either gz-archive plain ITCH file filter_msg_class vector classes load, can \"orders\", \"trades\", \"modifications\", ... see also get_msg_classes(). Default value take message classes. skip Number messages skip starting parsing messages, note skip parameter applies specific message class, .e., skip messages type (e.g., skip first 10 messages class). n_max Maximum number messages parse, default read values. Can also data.frame msg_types counts, returned count_messages(). Note n_max parameter applies specific message class whole file. filter_msg_type character vector, specifying filter message types. Note can used return '' orders instance. filter_stock_locate integer vector, specifying filter locate codes. locate codes can looked calling read_stock_directory() downloading NASDAQ using download_stock_directory(). Note message types (e.g., system events, MWCB, IPO) use locate code. min_timestamp 64 bit integer vector (see also bit64::.integer64()) minimum timestamp (inclusive). Note: min max timestamp must supplied length left empty. max_timestamp 64 bit integer vector (see also bit64::.integer64()) maxium timestamp (inclusive). Note: min max timestamp must supplied length left empty. filter_stock character vector, specifying filter stocks. Note shorthand filter_stock_locate argument, tries find stock_locate based stock_directory argument, found, try extract stock directory file, else error thrown. stock_directory data.frame containing stock-locate code relationship. outputted read_stock_directory(). used filter_stock set. download stock directory NASDAQs server, use download_stock_directory(). buffer_size size buffer bytes, defaults 1e8 (100 MB), large amount RAM, 1e9 (1GB) might faster quiet TRUE, status messages suppressed, defaults FALSE add_meta TRUE, date exchange information file added, defaults TRUE force_gunzip applies input file gz-archive file (gunzipped) name already exists. set TRUE, existing file overwritten. Default value FALSE force_cleanup applies input file gz-archive. force_cleanup=TRUE, gunzipped raw file deleted afterwards. applies gunzipped raw file exist . ... Additional arguments passed read_itch add_descriptions add longer descriptions shortened variables. added information taken official ITCH documentation see also open_itch_specification()","code":""},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"data.table containing messages","code":""},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"details different messages types can found official ITCH specification (see also open_itch_specification()) read_itch: Reads message class message, can also read multiple classes one file-pass. read_system_events: Reads system event messages. Message type S read_stock_directory: Reads stock trading messages. Message type R read_trading_status: Reads trading status messages. Message type H h read_reg_sho: Reads messages regarding reg SHO. Message type Y read_market_participant_states: Reads messages regarding status market participants. Message type L read_mwcb: Reads messages regarding Market-Wide-Circuit-Breakers (MWCB). Message type V W read_ipo: Reads messages regarding IPOs. Message type K read_luld: Reads messages regarding LULDs (limit -limit ) auction collars. Message type J read_orders: Reads order messages. Message type F read_modifications: Reads order modification messages. Message type E, C, X, D, U read_trades: Reads trade messages. Message type P, Q B read_noii: Reads Net Order Imbalance Indicatio (NOII) messages. Message type read_rpii: Reads Retail Price Improvement Indicator (RPII) messages. Message type N backwards compatability reasons, following functions provided well: get_orders: Redirects read_orders get_trades: Redirects read_trades get_modifications: Redirects read_modifications","code":""},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"https://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHspecification.pdf","code":""},{"path":"https://davzim.github.io/RITCH/reference/read_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads certain messages of an ITCH-file into a data.table — read_functions","text":"","code":"file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") od <- read_orders(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.30MB/s tr <- read_trades(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'trades' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.36MB/s md <- read_modifications(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'modifications' messages 2,000 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.42MB/s  ## Alternatively od <- read_itch(file, \"orders\") #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.36MB/s  ll <- read_itch(file, c(\"orders\", \"trades\", \"modifications\")) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Counting]   num 'modifications' messages 2,000 #> [Counting]   num 'trades' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.32MB/s  str(od) #> Classes ‘data.table’ and 'data.frame':\t5000 obs. of  13 variables: #>  $ msg_type       : chr  \"A\" \"A\" \"F\" \"A\" ... #>  $ stock_locate   : int  2 2 2 2 2 2 2 2 2 2 ... #>  $ tracking_number: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ timestamp      :integer64 31139052372053 31141354532167 32813425752711 32826656500150 32827351405783 32893988026867 33067242028997 33300886636321 ...  #>  $ order_ref      :integer64 0 100 84836 87020 87040 93032 105532 121012 ...  #>  $ buy            : logi  TRUE TRUE TRUE FALSE FALSE FALSE ... #>  $ shares         : int  1000 1000 100 1220 2000 600 2000 200 100 3000 ... #>  $ stock          : chr  \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>  $ price          : num  5.32 5.32 5.29 5.42 5.42 ... #>  $ mpid           : chr  \"\" \"\" \"VIRT\" \"\" ... #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T08:38:59.052372053+00:00 2010-12-24T08:39:01.354532167+00:00 2010-12-24T09:06:53.425752711+00:00 2010-12-24T09:07:06.656500150+00:00 2010-12-24T09:07:07.351405783+00:00 2010-12-24T09:08:13.988026867+00:00 2010-12-24T09:11:07.242028997+00:00 2010-12-24T09:15:00.886636321+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>  str(tr) #> Classes ‘data.table’ and 'data.frame':\t5000 obs. of  14 variables: #>  $ msg_type       : chr  \"P\" \"P\" \"P\" \"P\" ... #>  $ stock_locate   : int  2 2 2 2 2 3 3 3 3 3 ... #>  $ tracking_number: int  2 2 2 2 2 2 4 2 2 2 ... #>  $ timestamp      :integer64 34210128591201 34210355475120 34210767188977 34211127433476 34212046014088 34235711475708 34239928637481 34239928703094 ...  #>  $ order_ref      :integer64 0 0 0 0 0 0 0 0 ...  #>  $ buy            : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ shares         : int  200 300 100 47 200 100 100 100 1 40 ... #>  $ stock          : chr  \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>  $ price          : num  5.33 5.33 5.33 5.33 5.33 ... #>  $ match_number   :integer64 19447 19451 19493 19515 19547 20148 20242 20241 ...  #>  $ cross_type     : chr  NA NA NA NA ... #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T09:30:10.128591201+00:00 2010-12-24T09:30:10.355475120+00:00 2010-12-24T09:30:10.767188977+00:00 2010-12-24T09:30:11.127433476+00:00 2010-12-24T09:30:12.046014088+00:00 2010-12-24T09:30:35.711475708+00:00 2010-12-24T09:30:39.928637481+00:00 2010-12-24T09:30:39.928703094+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>  str(md) #> Classes ‘data.table’ and 'data.frame':\t2000 obs. of  13 variables: #>  $ msg_type       : chr  \"E\" \"E\" \"E\" \"E\" ... #>  $ stock_locate   : int  2 2 2 2 2 2 2 3 2 3 ... #>  $ tracking_number: int  2 6 6 2 2 2 0 0 2 4 ... #>  $ timestamp      :integer64 32857937604189 33415045933113 33451454329367 33451456680919 33452976359207 33543994528073 34209047203227 34241409914577 ...  #>  $ order_ref      :integer64 87020 121012 130800 130800 130800 134972 84836 1040034 ...  #>  $ shares         : int  1220 200 2738 100 62 25 NA NA 100 200 ... #>  $ match_number   :integer64 18049 18225 18234 18235 18237 18257 NA NA ...  #>  $ printable      : logi  NA NA NA NA NA NA ... #>  $ price          : num  NA NA NA NA NA NA NA NA NA NA ... #>  $ new_order_ref  :integer64 NA NA NA NA NA NA NA NA ...  #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T09:07:37.937604189+00:00 2010-12-24T09:16:55.045933113+00:00 2010-12-24T09:17:31.454329367+00:00 2010-12-24T09:17:31.456680919+00:00 2010-12-24T09:17:32.976359207+00:00 2010-12-24T09:19:03.994528073+00:00 2010-12-24T09:30:09.047203227+00:00 2010-12-24T09:30:41.409914577+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>  str(ll) #> List of 3 #>  $ orders       :Classes ‘data.table’ and 'data.frame':\t5000 obs. of  13 variables: #>   ..$ msg_type       : chr [1:5000] \"A\" \"A\" \"F\" \"A\" ... #>   ..$ stock_locate   : int [1:5000] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ tracking_number: int [1:5000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ timestamp      :integer64 [1:5000] 31139052372053 31141354532167 32813425752711 32826656500150 32827351405783 32893988026867 33067242028997 33300886636321 ...  #>   ..$ order_ref      :integer64 [1:5000] 0 100 84836 87020 87040 93032 105532 121012 ...  #>   ..$ buy            : logi [1:5000] TRUE TRUE TRUE FALSE FALSE FALSE ... #>   ..$ shares         : int [1:5000] 1000 1000 100 1220 2000 600 2000 200 100 3000 ... #>   ..$ stock          : chr [1:5000] \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>   ..$ price          : num [1:5000] 5.32 5.32 5.29 5.42 5.42 ... #>   ..$ mpid           : chr [1:5000] \"\" \"\" \"VIRT\" \"\" ... #>   ..$ date           : POSIXct[1:5000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:5000] 2010-12-24T08:38:59.052372053+00:00 2010-12-24T08:39:01.354532167+00:00 2010-12-24T09:06:53.425752711+00:00 2010-12-24T09:07:06.656500150+00:00 2010-12-24T09:07:07.351405783+00:00 2010-12-24T09:08:13.988026867+00:00 2010-12-24T09:11:07.242028997+00:00 2010-12-24T09:15:00.886636321+00:00 ...  #>   ..$ exchange       : chr [1:5000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ trades       :Classes ‘data.table’ and 'data.frame':\t5000 obs. of  14 variables: #>   ..$ msg_type       : chr [1:5000] \"P\" \"P\" \"P\" \"P\" ... #>   ..$ stock_locate   : int [1:5000] 2 2 2 2 2 3 3 3 3 3 ... #>   ..$ tracking_number: int [1:5000] 2 2 2 2 2 2 4 2 2 2 ... #>   ..$ timestamp      :integer64 [1:5000] 34210128591201 34210355475120 34210767188977 34211127433476 34212046014088 34235711475708 34239928637481 34239928703094 ...  #>   ..$ order_ref      :integer64 [1:5000] 0 0 0 0 0 0 0 0 ...  #>   ..$ buy            : logi [1:5000] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..$ shares         : int [1:5000] 200 300 100 47 200 100 100 100 1 40 ... #>   ..$ stock          : chr [1:5000] \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>   ..$ price          : num [1:5000] 5.33 5.33 5.33 5.33 5.33 ... #>   ..$ match_number   :integer64 [1:5000] 19447 19451 19493 19515 19547 20148 20242 20241 ...  #>   ..$ cross_type     : chr [1:5000] NA NA NA NA ... #>   ..$ date           : POSIXct[1:5000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:5000] 2010-12-24T09:30:10.128591201+00:00 2010-12-24T09:30:10.355475120+00:00 2010-12-24T09:30:10.767188977+00:00 2010-12-24T09:30:11.127433476+00:00 2010-12-24T09:30:12.046014088+00:00 2010-12-24T09:30:35.711475708+00:00 2010-12-24T09:30:39.928637481+00:00 2010-12-24T09:30:39.928703094+00:00 ...  #>   ..$ exchange       : chr [1:5000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ modifications:Classes ‘data.table’ and 'data.frame':\t2000 obs. of  13 variables: #>   ..$ msg_type       : chr [1:2000] \"E\" \"E\" \"E\" \"E\" ... #>   ..$ stock_locate   : int [1:2000] 2 2 2 2 2 2 2 3 2 3 ... #>   ..$ tracking_number: int [1:2000] 2 6 6 2 2 2 0 0 2 4 ... #>   ..$ timestamp      :integer64 [1:2000] 32857937604189 33415045933113 33451454329367 33451456680919 33452976359207 33543994528073 34209047203227 34241409914577 ...  #>   ..$ order_ref      :integer64 [1:2000] 87020 121012 130800 130800 130800 134972 84836 1040034 ...  #>   ..$ shares         : int [1:2000] 1220 200 2738 100 62 25 NA NA 100 200 ... #>   ..$ match_number   :integer64 [1:2000] 18049 18225 18234 18235 18237 18257 NA NA ...  #>   ..$ printable      : logi [1:2000] NA NA NA NA NA NA ... #>   ..$ price          : num [1:2000] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ new_order_ref  :integer64 [1:2000] NA NA NA NA NA NA NA NA ...  #>   ..$ date           : POSIXct[1:2000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:2000] 2010-12-24T09:07:37.937604189+00:00 2010-12-24T09:16:55.045933113+00:00 2010-12-24T09:17:31.454329367+00:00 2010-12-24T09:17:31.456680919+00:00 2010-12-24T09:17:32.976359207+00:00 2010-12-24T09:19:03.994528073+00:00 2010-12-24T09:30:09.047203227+00:00 2010-12-24T09:30:41.409914577+00:00 ...  #>   ..$ exchange       : chr [1:2000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>   # additional options:  # turn off feedback od <- read_orders(file, quiet = TRUE)  # take only subset of messages od <- read_orders(file, skip = 3, n_max = 10) #> [Note]       n_max overrides counting the messages. Number of messages may be off #> [Filter]     skip: 3 n_max: 10 (4 - 13) #> [Counting]   num 'orders' messages 20 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.33MB/s  # a message count can be provided for slightly faster reads msg_count <- count_messages(file) #> [Counting]   12,012 total messages found #> [Converting] to data.table #> [Done]       in 0.00 secs at 899.29MB/s od <- read_orders(file, n_max = msg_count) #> [Filter]     skip: 0 n_max: 5000 (1 - 5000) #> [Counting]   num 'orders' messages 10,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.35MB/s  # .gz archives will be automatically unzipped gz_file <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50.gz\", package = \"RITCH\") od <- read_orders(gz_file) #> [INFO] Unzipped file '/home/runner/work/_temp/Library/RITCH/extdata/ex20101224.TEST_ITCH_50' already found, using that (overwrite with force_gunzip=TRUE) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.19 secs at 833.37KB/s #> [Cleanup]    Removing file '/home/runner/work/_temp/Library/RITCH/extdata/ex20101224.TEST_ITCH_50' # force a decompress and delete the decompressed file afterwards od <- read_orders(gz_file, force_gunzip = TRUE, force_cleanup = TRUE) #> [Decompressing] '/home/runner/work/_temp/Library/RITCH/extdata/ex20101224.TEST_ITCH_50.gz' to 'ex20101224.TEST_ITCH_50' #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.21 secs at 763.81KB/s #> [Cleanup]    Removing file 'ex20101224.TEST_ITCH_50'  ## read_itch() od <- read_itch(file, \"orders\") #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.34MB/s otm <- read_itch(file, c(\"orders\", \"trades\", \"modifications\")) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Counting]   num 'modifications' messages 2,000 #> [Counting]   num 'trades' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.32MB/s str(otm) #> List of 3 #>  $ orders       :Classes ‘data.table’ and 'data.frame':\t5000 obs. of  13 variables: #>   ..$ msg_type       : chr [1:5000] \"A\" \"A\" \"F\" \"A\" ... #>   ..$ stock_locate   : int [1:5000] 2 2 2 2 2 2 2 2 2 2 ... #>   ..$ tracking_number: int [1:5000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ timestamp      :integer64 [1:5000] 31139052372053 31141354532167 32813425752711 32826656500150 32827351405783 32893988026867 33067242028997 33300886636321 ...  #>   ..$ order_ref      :integer64 [1:5000] 0 100 84836 87020 87040 93032 105532 121012 ...  #>   ..$ buy            : logi [1:5000] TRUE TRUE TRUE FALSE FALSE FALSE ... #>   ..$ shares         : int [1:5000] 1000 1000 100 1220 2000 600 2000 200 100 3000 ... #>   ..$ stock          : chr [1:5000] \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>   ..$ price          : num [1:5000] 5.32 5.32 5.29 5.42 5.42 ... #>   ..$ mpid           : chr [1:5000] \"\" \"\" \"VIRT\" \"\" ... #>   ..$ date           : POSIXct[1:5000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:5000] 2010-12-24T08:38:59.052372053+00:00 2010-12-24T08:39:01.354532167+00:00 2010-12-24T09:06:53.425752711+00:00 2010-12-24T09:07:06.656500150+00:00 2010-12-24T09:07:07.351405783+00:00 2010-12-24T09:08:13.988026867+00:00 2010-12-24T09:11:07.242028997+00:00 2010-12-24T09:15:00.886636321+00:00 ...  #>   ..$ exchange       : chr [1:5000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ trades       :Classes ‘data.table’ and 'data.frame':\t5000 obs. of  14 variables: #>   ..$ msg_type       : chr [1:5000] \"P\" \"P\" \"P\" \"P\" ... #>   ..$ stock_locate   : int [1:5000] 2 2 2 2 2 3 3 3 3 3 ... #>   ..$ tracking_number: int [1:5000] 2 2 2 2 2 2 4 2 2 2 ... #>   ..$ timestamp      :integer64 [1:5000] 34210128591201 34210355475120 34210767188977 34211127433476 34212046014088 34235711475708 34239928637481 34239928703094 ...  #>   ..$ order_ref      :integer64 [1:5000] 0 0 0 0 0 0 0 0 ...  #>   ..$ buy            : logi [1:5000] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..$ shares         : int [1:5000] 200 300 100 47 200 100 100 100 1 40 ... #>   ..$ stock          : chr [1:5000] \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>   ..$ price          : num [1:5000] 5.33 5.33 5.33 5.33 5.33 ... #>   ..$ match_number   :integer64 [1:5000] 19447 19451 19493 19515 19547 20148 20242 20241 ...  #>   ..$ cross_type     : chr [1:5000] NA NA NA NA ... #>   ..$ date           : POSIXct[1:5000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:5000] 2010-12-24T09:30:10.128591201+00:00 2010-12-24T09:30:10.355475120+00:00 2010-12-24T09:30:10.767188977+00:00 2010-12-24T09:30:11.127433476+00:00 2010-12-24T09:30:12.046014088+00:00 2010-12-24T09:30:35.711475708+00:00 2010-12-24T09:30:39.928637481+00:00 2010-12-24T09:30:39.928703094+00:00 ...  #>   ..$ exchange       : chr [1:5000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ modifications:Classes ‘data.table’ and 'data.frame':\t2000 obs. of  13 variables: #>   ..$ msg_type       : chr [1:2000] \"E\" \"E\" \"E\" \"E\" ... #>   ..$ stock_locate   : int [1:2000] 2 2 2 2 2 2 2 3 2 3 ... #>   ..$ tracking_number: int [1:2000] 2 6 6 2 2 2 0 0 2 4 ... #>   ..$ timestamp      :integer64 [1:2000] 32857937604189 33415045933113 33451454329367 33451456680919 33452976359207 33543994528073 34209047203227 34241409914577 ...  #>   ..$ order_ref      :integer64 [1:2000] 87020 121012 130800 130800 130800 134972 84836 1040034 ...  #>   ..$ shares         : int [1:2000] 1220 200 2738 100 62 25 NA NA 100 200 ... #>   ..$ match_number   :integer64 [1:2000] 18049 18225 18234 18235 18237 18257 NA NA ...  #>   ..$ printable      : logi [1:2000] NA NA NA NA NA NA ... #>   ..$ price          : num [1:2000] NA NA NA NA NA NA NA NA NA NA ... #>   ..$ new_order_ref  :integer64 [1:2000] NA NA NA NA NA NA NA NA ...  #>   ..$ date           : POSIXct[1:2000], format: \"2010-12-24\" \"2010-12-24\" ... #>   ..$ datetime       :integer64 [1:2000] 2010-12-24T09:07:37.937604189+00:00 2010-12-24T09:16:55.045933113+00:00 2010-12-24T09:17:31.454329367+00:00 2010-12-24T09:17:31.456680919+00:00 2010-12-24T09:17:32.976359207+00:00 2010-12-24T09:19:03.994528073+00:00 2010-12-24T09:30:09.047203227+00:00 2010-12-24T09:30:41.409914577+00:00 ...  #>   ..$ exchange       : chr [1:2000] \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>   ## read_system_events() se <- read_system_events(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'system_events' messages 6 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.32MB/s se <- read_system_events(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Counting]   num 'system_events' messages 6 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.31MB/s str(se) #> Classes ‘data.table’ and 'data.frame':\t6 obs. of  10 variables: #>  $ msg_type       : chr  \"S\" \"S\" \"S\" \"S\" ... #>  $ stock_locate   : int  0 0 0 0 0 0 #>  $ tracking_number: int  0 0 0 0 0 0 #>  $ timestamp      :integer64 68698845099321 68390401688921 57607158187591 11202475298710 34199261999747 25209371478776  #>  $ event_code     : chr  \"C\" \"E\" \"M\" \"O\" ... #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T19:04:58.845099321+00:00 2010-12-24T18:59:50.401688921+00:00 2010-12-24T16:00:07.158187591+00:00 2010-12-24T03:06:42.475298710+00:00 2010-12-24T09:29:59.261999747+00:00 2010-12-24T07:00:09.371478776+00:00  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  $ event_name     : chr  \"End of Messages\" \"End of System Hours\" \"End of Market Hours\" \"Start of Messages\" ... #>  $ event_note     : chr  \"This is always the last message sent in any trading day.\" \"It indicates that Nasdaq is now closed and will not accept any new orders today. It is still possible to receiv\"| __truncated__ \"This message is intended to indicate that Market Hours orders are no longer available for execution\" \"Outside of time stamp messages, the start of day message is the first message sent in any trading day\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"sorted\")= chr \"event_code\"  ## read_stock_directory() sd <- read_stock_directory(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'stock_directory' messages 3 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.46MB/s sd <- read_stock_directory(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Counting]   num 'stock_directory' messages 3 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.41MB/s str(sd) #> Classes ‘data.table’ and 'data.frame':\t3 obs. of  24 variables: #>  $ msg_type             : chr  \"R\" \"R\" \"R\" #>  $ stock_locate         : int  1 3 2 #>  $ tracking_number      : int  0 0 0 #>  $ timestamp            :integer64 11435930564116 11436069862295 11436025019799  #>  $ stock                : chr  \"ALC\" \"CHAR\" \"BOB\" #>  $ market_category      : chr  \"N\" \"P\" \"S\" #>  $ financial_status     : chr  \"N\" \"N\" \"N\" #>  $ lot_size             : int  100 100 100 #>  $ round_lots_only      : logi  FALSE FALSE FALSE #>  $ issue_classification : chr  \"A\" \"A\" \"A\" #>  $ issue_subtype        : chr  \"Z\" \"Z\" \"Z\" #>  $ authentic            : logi  TRUE TRUE TRUE #>  $ short_sell_closeout  : logi  FALSE FALSE FALSE #>  $ ipo_flag             : logi  FALSE FALSE FALSE #>  $ luld_price_tier      : chr  \"2\" \"2\" \"2\" #>  $ etp_flag             : logi  FALSE FALSE FALSE #>  $ etp_leverage         : int  0 0 0 #>  $ inverse              : logi  FALSE FALSE FALSE #>  $ date                 : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime             :integer64 2010-12-24T03:10:35.930564116+00:00 2010-12-24T03:10:36.069862295+00:00 2010-12-24T03:10:36.025019799+00:00  #>  $ exchange             : chr  \"TEST\" \"TEST\" \"TEST\" #>  $ market_category_note : chr  \"New York Stock Exchange\" \"NYSE Arca\" \"Nasdaq Capital Market\" #>  $ financial_status_note: chr  \"Normal\" \"Normal\" \"Normal\" #>  $ luld_price_tier_note : chr  \"Tier 2 NMS Stocks\" \"Tier 2 NMS Stocks\" \"Tier 2 NMS Stocks\" #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"sorted\")= chr \"luld_price_tier\"  ## read_trading_status() ts <- read_trading_status(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'trading_status' messages 3 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.39MB/s ts <- read_trading_status(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Counting]   num 'trading_status' messages 3 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.43MB/s str(ts) #> Classes ‘data.table’ and 'data.frame':\t3 obs. of  15 variables: #>  $ msg_type          : chr  \"H\" \"H\" \"H\" #>  $ stock_locate      : int  1 2 3 #>  $ tracking_number   : int  0 0 0 #>  $ timestamp         :integer64 11436094498153 11436235406277 11436375417237  #>  $ stock             : chr  \"ALC\" \"BOB\" \"CHAR\" #>  $ trading_state     : chr  \"T\" \"T\" \"T\" #>  $ reserved          : chr  \" \" \" \" \" \" #>  $ reason            : chr  \"\" \"\" \"\" #>  $ market_code       : chr  NA NA NA #>  $ operation_halted  : logi  NA NA NA #>  $ date              : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime          :integer64 2010-12-24T03:10:36.094498153+00:00 2010-12-24T03:10:36.235406277+00:00 2010-12-24T03:10:36.375417237+00:00  #>  $ exchange          : chr  \"TEST\" \"TEST\" \"TEST\" #>  $ trading_state_note: chr  \"Trading on Nasdaq\" \"Trading on Nasdaq\" \"Trading on Nasdaq\" #>  $ market_code_note  : chr  NA NA NA #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"sorted\")= chr \"market_code\"  ## read_reg_sho() rs <- read_reg_sho(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.35MB/s rs <- read_reg_sho(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.41MB/s str(rs) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  10 variables: #>  $ msg_type          : chr  #>  $ stock_locate      : int  #>  $ tracking_number   : int  #>  $ timestamp         :integer64   #>  $ stock             : chr  #>  $ regsho_action     : chr  #>  $ date              : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime          :integer64 nanotime(0)  #>  $ exchange          : chr  #>  $ regsho_action_note: chr  #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_market_participant_states() mps <- read_market_participant_states(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.36MB/s mps <- read_market_participant_states(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.41MB/s str(mps) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  14 variables: #>  $ msg_type              : chr  #>  $ stock_locate          : int  #>  $ tracking_number       : int  #>  $ timestamp             :integer64   #>  $ mpid                  : chr  #>  $ stock                 : chr  #>  $ primary_mm            : logi  #>  $ mm_mode               : chr  #>  $ participant_state     : chr  #>  $ date                  : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime              :integer64 nanotime(0)  #>  $ exchange              : chr  #>  $ mm_mode_note          : chr  #>  $ participant_state_note: chr  #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_mwcb() mwcb <- read_mwcb(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.46MB/s str(mwcb) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  11 variables: #>  $ msg_type       : chr  #>  $ stock_locate   : int  #>  $ tracking_number: int  #>  $ timestamp      :integer64   #>  $ level1         : num  #>  $ level2         : num  #>  $ level3         : num  #>  $ breached_level : int  #>  $ date           : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime       :integer64 nanotime(0)  #>  $ exchange       : chr  #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_ipo() ipo <- read_ipo(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.41MB/s ipo <- read_ipo(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.46MB/s str(ipo) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  12 variables: #>  $ msg_type              : chr  #>  $ stock_locate          : int  #>  $ tracking_number       : int  #>  $ timestamp             :integer64   #>  $ stock                 : chr  #>  $ release_time          : int  #>  $ release_qualifier     : chr  #>  $ ipo_price             : num  #>  $ date                  : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime              :integer64 nanotime(0)  #>  $ exchange              : chr  #>  $ release_qualifier_note: chr  #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_luld() luld <- read_luld(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.43MB/s str(luld) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  12 variables: #>  $ msg_type       : chr  #>  $ stock_locate   : int  #>  $ tracking_number: int  #>  $ timestamp      :integer64   #>  $ stock          : chr  #>  $ reference_price: num  #>  $ upper_price    : num  #>  $ lower_price    : num  #>  $ extension      : int  #>  $ date           : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime       :integer64 nanotime(0)  #>  $ exchange       : chr  #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_orders() od <- read_orders(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'orders' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.36MB/s str(od) #> Classes ‘data.table’ and 'data.frame':\t5000 obs. of  13 variables: #>  $ msg_type       : chr  \"A\" \"A\" \"F\" \"A\" ... #>  $ stock_locate   : int  2 2 2 2 2 2 2 2 2 2 ... #>  $ tracking_number: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ timestamp      :integer64 31139052372053 31141354532167 32813425752711 32826656500150 32827351405783 32893988026867 33067242028997 33300886636321 ...  #>  $ order_ref      :integer64 0 100 84836 87020 87040 93032 105532 121012 ...  #>  $ buy            : logi  TRUE TRUE TRUE FALSE FALSE FALSE ... #>  $ shares         : int  1000 1000 100 1220 2000 600 2000 200 100 3000 ... #>  $ stock          : chr  \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>  $ price          : num  5.32 5.32 5.29 5.42 5.42 ... #>  $ mpid           : chr  \"\" \"\" \"VIRT\" \"\" ... #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T08:38:59.052372053+00:00 2010-12-24T08:39:01.354532167+00:00 2010-12-24T09:06:53.425752711+00:00 2010-12-24T09:07:06.656500150+00:00 2010-12-24T09:07:07.351405783+00:00 2010-12-24T09:08:13.988026867+00:00 2010-12-24T09:11:07.242028997+00:00 2010-12-24T09:15:00.886636321+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_modifications() mod <- read_modifications(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'modifications' messages 2,000 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.28MB/s str(mod) #> Classes ‘data.table’ and 'data.frame':\t2000 obs. of  13 variables: #>  $ msg_type       : chr  \"E\" \"E\" \"E\" \"E\" ... #>  $ stock_locate   : int  2 2 2 2 2 2 2 3 2 3 ... #>  $ tracking_number: int  2 6 6 2 2 2 0 0 2 4 ... #>  $ timestamp      :integer64 32857937604189 33415045933113 33451454329367 33451456680919 33452976359207 33543994528073 34209047203227 34241409914577 ...  #>  $ order_ref      :integer64 87020 121012 130800 130800 130800 134972 84836 1040034 ...  #>  $ shares         : int  1220 200 2738 100 62 25 NA NA 100 200 ... #>  $ match_number   :integer64 18049 18225 18234 18235 18237 18257 NA NA ...  #>  $ printable      : logi  NA NA NA NA NA NA ... #>  $ price          : num  NA NA NA NA NA NA NA NA NA NA ... #>  $ new_order_ref  :integer64 NA NA NA NA NA NA NA NA ...  #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T09:07:37.937604189+00:00 2010-12-24T09:16:55.045933113+00:00 2010-12-24T09:17:31.454329367+00:00 2010-12-24T09:17:31.456680919+00:00 2010-12-24T09:17:32.976359207+00:00 2010-12-24T09:19:03.994528073+00:00 2010-12-24T09:30:09.047203227+00:00 2010-12-24T09:30:41.409914577+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_trades() tr <- read_trades(file) #> [Counting]   num messages 12,012 #> [Counting]   num 'trades' messages 5,000 #> [Converting] to data.table #> [Done]       in 0.19 secs at 2.48MB/s str(tr) #> Classes ‘data.table’ and 'data.frame':\t5000 obs. of  14 variables: #>  $ msg_type       : chr  \"P\" \"P\" \"P\" \"P\" ... #>  $ stock_locate   : int  2 2 2 2 2 3 3 3 3 3 ... #>  $ tracking_number: int  2 2 2 2 2 2 4 2 2 2 ... #>  $ timestamp      :integer64 34210128591201 34210355475120 34210767188977 34211127433476 34212046014088 34235711475708 34239928637481 34239928703094 ...  #>  $ order_ref      :integer64 0 0 0 0 0 0 0 0 ...  #>  $ buy            : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ shares         : int  200 300 100 47 200 100 100 100 1 40 ... #>  $ stock          : chr  \"BOB\" \"BOB\" \"BOB\" \"BOB\" ... #>  $ price          : num  5.33 5.33 5.33 5.33 5.33 ... #>  $ match_number   :integer64 19447 19451 19493 19515 19547 20148 20242 20241 ...  #>  $ cross_type     : chr  NA NA NA NA ... #>  $ date           : POSIXct, format: \"2010-12-24\" \"2010-12-24\" ... #>  $ datetime       :integer64 2010-12-24T09:30:10.128591201+00:00 2010-12-24T09:30:10.355475120+00:00 2010-12-24T09:30:10.767188977+00:00 2010-12-24T09:30:11.127433476+00:00 2010-12-24T09:30:12.046014088+00:00 2010-12-24T09:30:35.711475708+00:00 2010-12-24T09:30:39.928637481+00:00 2010-12-24T09:30:39.928703094+00:00 ...  #>  $ exchange       : chr  \"TEST\" \"TEST\" \"TEST\" \"TEST\" ... #>  - attr(*, \".internal.selfref\")=<externalptr>   ## read_noii() noii <- read_noii(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.32MB/s noii <- read_noii(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.38MB/s noii #> Empty data.table (0 rows and 19 cols): msg_type,stock_locate,tracking_number,timestamp,paired_shares,imbalance_shares...  ## read_rpii() rpii <- read_rpii(file) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.22 secs at 2.14MB/s rpii <- read_rpii(file, add_descriptions = TRUE) #> [Counting]   num messages 12,012 #> [Converting] to data.table #> [Done]       in 0.20 secs at 2.27MB/s str(rpii) #> Classes ‘data.table’ and 'data.frame':\t0 obs. of  10 variables: #>  $ msg_type          : chr  #>  $ stock_locate      : int  #>  $ tracking_number   : int  #>  $ timestamp         :integer64   #>  $ stock             : chr  #>  $ interest_flag     : chr  #>  $ date              : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ datetime          :integer64 nanotime(0)  #>  $ exchange          : chr  #>  $ interest_flag_note: chr  #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"Note additional information, e.g., columns added, dropped process ITCH-compliant information saved.","code":""},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"","code":"write_itch(   ll,   file,   add_meta = TRUE,   append = FALSE,   compress = FALSE,   buffer_size = 1e+08,   quiet = FALSE,   append_warning = TRUE )"},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"ll data.frame list data.frames ITCH messages, format read_functions() return file filename target file. folder file exist, created recursively add_meta date file information added filename. Default value TRUE. Note adding meta information changes filename. append information appended file. Default value FALSE compress file gzipped. Default value FALSE. Note compress file, buffer_size matters lot, larger buffers likely get smaller filesizes end. Alternatively, slower, write file without compression fully gzip file using another program. buffer_size maximum buffer size. Default value 1e8 (100MB). Accepted values > 52 < 5e9 quiet TRUE, status messages suppressed, defaults FALSE append_warning append set, warning timestamp ordering given. Set append_warning = FALSE silence warning. Default value TRUE","code":""},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"filename (invisibly)","code":""},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"Note ITCH filename contains information date exchange. can specified explicitly file argument added turned add_meta = FALSE.","code":""},{"path":"https://davzim.github.io/RITCH/reference/write_itch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes a data.frame or a list of data.frames of ITCH messages to file — write_itch","text":"","code":"infile <- system.file(\"extdata\", \"ex20101224.TEST_ITCH_50\", package = \"RITCH\") sys <- read_system_events(infile, quiet = TRUE) outfile <- tempfile() write_itch(sys, outfile) #> [Counting]   6 messages (84 bytes) found #> [Converting] to binary . #> [Writing]    to file #> [Outfile]    '/tmp/RtmpXEfoDg/file16d3329aa64b_20101224.TEST_ITCH_50' #> [Done]       in 0.00 secs at 65.17KB/s  # create a list of events, stock directory, and orders and write to a file sdir <- read_stock_directory(infile, quiet = TRUE) od   <- read_orders(infile, quiet = TRUE)  ll <- list(sys, sdir, od) write_itch(ll, outfile) #> [Counting]   5,009 messages (190,219 bytes) found #> [Converting] to binary . #> [Writing]    to file #> [Outfile]    '/tmp/RtmpXEfoDg/file16d3329aa64b_20101224.TEST_ITCH_50' #> [Done]       in 0.03 secs at 7.21MB/s"},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0121","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.21","title":"RITCH 0.1.21","text":"fix long running tasks read functions","code":""},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0120","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.20","title":"RITCH 0.1.20","text":"fix bug tests fail platforms files written cleaned CRAN release","code":""},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0119","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.19","title":"RITCH 0.1.19","text":"CRAN release: 2023-06-01 fix bug tests platforms CRAN release","code":""},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0118","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.18","title":"RITCH 0.1.18","text":"CRAN release: 2023-05-30 CRAN release","code":""},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0111","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.11","title":"RITCH 0.1.11","text":"update internal C++ structure, reducing code complexity, increasing read speeds, reducing size package add filter_itch(infile, outfile, ...) filter directly files","code":""},{"path":"https://davzim.github.io/RITCH/news/index.html","id":"ritch-0110","dir":"Changelog","previous_headings":"","what":"RITCH 0.1.10","title":"RITCH 0.1.10","text":"add write_itch() write ITCH files add filters read_* functions add read functions classes","code":""}]
