// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_messages_impl
Rcpp::DataFrame count_messages_impl(std::string filename, int64_t max_buffer_size, bool quiet);
RcppExport SEXP _RITCH_count_messages_impl(SEXP filenameSEXP, SEXP max_buffer_sizeSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int64_t >::type max_buffer_size(max_buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(count_messages_impl(filename, max_buffer_size, quiet));
    return rcpp_result_gen;
END_RCPP
}
// filter_itch_impl
void filter_itch_impl(std::string infile, std::string outfile, int64_t start, int64_t end, Rcpp::CharacterVector filter_msg_type, Rcpp::IntegerVector filter_stock_locate, Rcpp::NumericVector min_timestamp, Rcpp::NumericVector max_timestamp, bool append, int64_t max_buffer_size, bool quiet);
RcppExport SEXP _RITCH_filter_itch_impl(SEXP infileSEXP, SEXP outfileSEXP, SEXP startSEXP, SEXP endSEXP, SEXP filter_msg_typeSEXP, SEXP filter_stock_locateSEXP, SEXP min_timestampSEXP, SEXP max_timestampSEXP, SEXP appendSEXP, SEXP max_buffer_sizeSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filter_msg_type(filter_msg_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type filter_stock_locate(filter_stock_locateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type min_timestamp(min_timestampSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type max_timestamp(max_timestampSEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    Rcpp::traits::input_parameter< int64_t >::type max_buffer_size(max_buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    filter_itch_impl(infile, outfile, start, end, filter_msg_type, filter_stock_locate, min_timestamp, max_timestamp, append, max_buffer_size, quiet);
    return R_NilValue;
END_RCPP
}
// gunzip_file_impl
void gunzip_file_impl(std::string infile, std::string outfile, int64_t buffer_size);
RcppExport SEXP _RITCH_gunzip_file_impl(SEXP infileSEXP, SEXP outfileSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< int64_t >::type buffer_size(buffer_sizeSEXP);
    gunzip_file_impl(infile, outfile, buffer_size);
    return R_NilValue;
END_RCPP
}
// gzip_file_impl
void gzip_file_impl(std::string infile, std::string outfile, int64_t buffer_size);
RcppExport SEXP _RITCH_gzip_file_impl(SEXP infileSEXP, SEXP outfileSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< int64_t >::type buffer_size(buffer_sizeSEXP);
    gzip_file_impl(infile, outfile, buffer_size);
    return R_NilValue;
END_RCPP
}
// read_itch_impl
Rcpp::List read_itch_impl(std::vector<std::string> classes, std::string filename, int64_t start, int64_t end, Rcpp::CharacterVector filter_msg_type, Rcpp::IntegerVector filter_stock_locate, Rcpp::NumericVector min_timestamp, Rcpp::NumericVector max_timestamp, int64_t max_buffer_size, bool quiet);
RcppExport SEXP _RITCH_read_itch_impl(SEXP classesSEXP, SEXP filenameSEXP, SEXP startSEXP, SEXP endSEXP, SEXP filter_msg_typeSEXP, SEXP filter_stock_locateSEXP, SEXP min_timestampSEXP, SEXP max_timestampSEXP, SEXP max_buffer_sizeSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int64_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int64_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filter_msg_type(filter_msg_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type filter_stock_locate(filter_stock_locateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type min_timestamp(min_timestampSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type max_timestamp(max_timestampSEXP);
    Rcpp::traits::input_parameter< int64_t >::type max_buffer_size(max_buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(read_itch_impl(classes, filename, start, end, filter_msg_type, filter_stock_locate, min_timestamp, max_timestamp, max_buffer_size, quiet));
    return rcpp_result_gen;
END_RCPP
}
// write_itch_impl
int64_t write_itch_impl(Rcpp::List ll, std::string filename, bool append, bool gz, size_t max_buffer_size, bool quiet);
RcppExport SEXP _RITCH_write_itch_impl(SEXP llSEXP, SEXP filenameSEXP, SEXP appendSEXP, SEXP gzSEXP, SEXP max_buffer_sizeSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type ll(llSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    Rcpp::traits::input_parameter< bool >::type gz(gzSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_buffer_size(max_buffer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(write_itch_impl(ll, filename, append, gz, max_buffer_size, quiet));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RITCH_count_messages_impl", (DL_FUNC) &_RITCH_count_messages_impl, 3},
    {"_RITCH_filter_itch_impl", (DL_FUNC) &_RITCH_filter_itch_impl, 11},
    {"_RITCH_gunzip_file_impl", (DL_FUNC) &_RITCH_gunzip_file_impl, 3},
    {"_RITCH_gzip_file_impl", (DL_FUNC) &_RITCH_gzip_file_impl, 3},
    {"_RITCH_read_itch_impl", (DL_FUNC) &_RITCH_read_itch_impl, 10},
    {"_RITCH_write_itch_impl", (DL_FUNC) &_RITCH_write_itch_impl, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_RITCH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
