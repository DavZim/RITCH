% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_functions.R
\name{read_functions}
\alias{read_functions}
\alias{read_itch}
\alias{read_system_events}
\alias{read_stock_directory}
\alias{read_trading_status}
\alias{read_reg_sho}
\alias{read_market_participant_states}
\alias{read_mwcb}
\alias{read_ipo}
\alias{read_luld}
\alias{read_orders}
\alias{read_modifications}
\alias{read_trades}
\alias{read_noii}
\alias{read_rpii}
\alias{get_orders}
\alias{get_trades}
\alias{get_modifications}
\title{Reads certain messages of an ITCH-file into a data.table}
\usage{
read_itch(
  file,
  msg_class,
  skip = 0,
  n_max = -1,
  filter_msg_type = NA_character_,
  filter_stock_locate = NA_integer_,
  min_timestamp = bit64::as.integer64(NA),
  max_timestamp = bit64::as.integer64(NA),
  filter_stock = NA_character_,
  stock_directory = NA,
  buffer_size = -1,
  quiet = FALSE,
  add_meta = TRUE,
  force_gunzip = FALSE,
  force_cleanup = FALSE
)

read_system_events(file, ..., add_descriptions = FALSE)

read_stock_directory(file, ..., add_descriptions = FALSE)

read_trading_status(file, ...)

read_reg_sho(file, ..., add_descriptions = FALSE)

read_market_participant_states(file, ..., add_descriptions = FALSE)

read_mwcb(file, ...)

read_ipo(file, ..., add_descriptions = FALSE)

read_luld(file, ...)

read_orders(file, ...)

read_modifications(file, ...)

read_trades(file, ...)

read_noii(file, ..., add_descriptions = FALSE)

read_rpii(file, ..., add_descriptions = FALSE)

get_orders(file, ...)

get_trades(file, ...)

get_modifications(file, ...)
}
\arguments{
\item{file}{the path to the input file, either a gz-file or a plain ITCH file}

\item{msg_class}{the class to load, can be "orders", "trades", "modifications", ... Only applies to the read_itch() function.}

\item{skip}{Number of messages to skip before starting parsing messages,
note it only applies to messages of this type.}

\item{n_max}{Maximum number of messages to parse, default is to read all values.
Can also be a data.frame of msg_types and counts, as returned by
\code{\link{count_messages}}}

\item{filter_msg_type}{a character vector, specifying a filter for message types.
Note that this can be used to only return 'A' orders for instance.}

\item{filter_stock_locate}{an integer vector, specifying a filter for locate codes.
The locate codes can be looked up by calling \code{\link{read_stock_directory}}.
Note that some message types (e.g., system events, MWCB, and IPO) do not use
a locate code.}

\item{min_timestamp}{an 64 bit integer vector (see also \code{\link[bit64]{as.integer64}})
of minimum timestamp (inclusive).
Note: min and max timestamp must be supplied with the same length or left empty.}

\item{max_timestamp}{an 64 bit integer vector (see also \code{\link[bit64]{as.integer64}})
of maxium timestamp (inclusive).
Note: min and max timestamp must be supplied with the same length or left empty.}

\item{filter_stock}{a character vector, specifying a filter for stocks.
Note that this a shorthand for the \code{filter_stock_locate} argument, as it
tries to find the stock_locate based on the \code{stock_directory} argument,
if this is not found, it will try to extract the stock directory from the file,
else an error is thrown.}

\item{stock_directory}{A data.frame containing the stock-locate code relationship.
As outputted by \code{\link{read_stock_directory}}.
Only used if \code{filter_stock} is set. To download the stock directory from
NASDAQs FTP server, use \code{\link{download_stock_directory}}.}

\item{buffer_size}{the size of the buffer in bytes, defaults to 1e8 (100 MB),
if you have a large amount of RAM, 1e9 (1GB) might be faster}

\item{quiet}{if TRUE, the status messages are suppressed, defaults to FALSE}

\item{add_meta}{if TRUE, the date and exchange information of the file are added, defaults to TRUE}

\item{force_gunzip}{only applies if file is a gz-file and a file with the same (gunzipped) name already exists.
if set to TRUE, the existing file is overwritten. Default value is FALSE}

\item{force_cleanup}{only applies if file is a gz-file. If force_cleanup=TRUE, the gunzipped raw file will be deleted afterwards.}

\item{...}{Additional arguments passed to \code{read_itch}}

\item{add_descriptions}{add longer descriptions to shortened variables.
The added information is taken from the official ITCH documentation
see also \code{\link{open_itch_specification}}}
}
\value{
a data.table containing the messages
}
\description{
For faster file-reads (at the tradeoff of increased memory usages), you can
increase the \code{buffer_size} to 1GB (1e9) or more.

If you read multiple different message types from the same file, you can
provide the message counts as outputted from \code{\link{count_messages}} to
the \code{n_max} argument, this allows skipping one pass over the
file per read instruction.

If the file is too large to be loaded into the workspace at once, you can
specify different \code{skip} and \code{n_max} to load only
a specific range of messages.

Note that all read functions allow both plain ITCH files as well as gzipped
files. If a gzipped file is found, it will look for a plain ITCH file with
the same name and use that instead. If this file is not found, it will be
created. Use \code{force_cleanup = TRUE} to force the deletion of the
unzipped file after use.
}
\details{
The details of the different messages types can be found in the official
ITCH specification (see also \code{\link{open_itch_specification}})

\itemize{
 \item{\code{read_itch}: Generic function called by the other read
   functions.}
}

For backwards compatability reasons, the following functions are provided as
well:
\itemize{\item{\code{get_orders}: Redirects to \code{read_orders}}}

\itemize{\item{\code{get_trades}: Redirects to \code{read_trades}}}

\itemize{\item{\code{get_modifications}: Redirects to \code{read_modifications}}}
}
\examples{
file <- system.file("extdata", "ex20101224.TEST_ITCH_50", package = "RITCH")
od <- read_orders(file)
tr <- read_trades(file)
md <- read_modifications(file)

## Alternatively 
od <- read_itch(file, "orders")

ll <- read_itch(file, c("orders", "trades", "modifications"))

str(od)
str(tr)
str(md)

# additional options:

# turn off feedback
od <- read_orders(file, quiet = TRUE)

# take only subset of messages
od <- read_orders(file, skip = 3, n_max = 10)

# a message count can be provided for slightly faster reads
msg_count <- count_messages(file)
od <- read_orders(file, n_max = msg_count)
  
# .gz files will be automatically unzipped
gz_file <- system.file("extdata", "ex20101224.TEST_ITCH_50.gz", package = "RITCH")
od <- read_orders(gz_file)
# force a decompress and delete the decompressed file afterwards
od <- read_orders(gz_file, force_gunzip = TRUE, force_cleanup = TRUE)
}
\references{
\url{https://www.nasdaqtrader.com/content/technicalsupport/specifications/dataproducts/NQTVITCHspecification.pdf}
}
