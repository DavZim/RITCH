% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_functions.R
\name{read_functions}
\alias{read_functions}
\alias{read_ITCH}
\alias{read_orders}
\alias{read_modifications}
\alias{read_trades}
\alias{read_system_events}
\alias{read_stock_directory}
\title{Reads certain messages of an ITCH-file into a data.table}
\usage{
read_ITCH(
  file,
  type,
  start_msg_count = 0,
  end_msg_count = -1,
  buffer_size = -1,
  quiet = FALSE,
  force_gunzip = FALSE,
  force_cleanup = FALSE
)

read_orders(file, ...)

read_modifications(file, ...)

read_trades(file, ...)

read_system_events(file, ..., add_event_information = FALSE)

read_stock_directory(file, ..., add_descriptions = FALSE)
}
\arguments{
\item{file}{the path to the input file, either a gz-file or a plain-text file}

\item{type}{the type to load, can be "orders", "trades", "modifications", ... Only applies to the read_ITCH() function.}

\item{start_msg_count}{the start count of the messages, defaults to 0, or a data.frame of msg_types and counts, as returned by \code{\link{count_messages}}}

\item{end_msg_count}{the end count of the messages, defaults to all messages}

\item{buffer_size}{the size of the buffer in bytes, defaults to 1e8 (100 MB), 
if you have a large amount of RAM, 1e9 (1GB) might be faster}

\item{quiet}{if TRUE, the status messages are suppressed, defaults to FALSE}

\item{force_gunzip}{only applies if file is a gz-file and a file with the same (gunzipped) name already exists.
if set to TRUE, the existing file is overwritten. Default value is FALSE}

\item{force_cleanup}{only applies if file is a gz-file. If force_cleanup=TRUE, the gunzipped raw file will be deleted afterwards.}

\item{...}{Additional arguments passed to \code{read_ITCH}}

\item{add_event_information}{if additional event information should be added, default value is FALSE.
The added information is taken from the official ITCH documentation section 4.1, 
see also \code{\link{open_itch_specification}}}

\item{add_descriptions}{add longer descriptions to shortened variables}
}
\value{
a data.table containing the messages
}
\description{
The read functions consist of \code{read_trades}, \code{read_orders}, and \code{read_modifications}.

TODO: Document here the different functions, which messages they read and what they imply...

If the file is too large to be loaded into the workspace at once,
you can specify different start_msg_count/end_msg_counts to load only some messages.
}
\details{
Order messages refer to message type 'A' and 'F'

Order messages refer to message type 'E', 'C', 'X', 'D', and 'U'

Trade messages refer to message type 'P', 'Q', and 'B'

System event messages refer to message type 'S'

Stock directory messages refer to message type 'R'
}
\examples{
file <- "20191230.BX_ITCH_50"
od <- get_orders(file)
tr <- get_trades(file)
md <- get_modifications(file)

## Alternatively 
od <- read_ITCH(file, "orders")

str(od)
str(tr)
str(md)

\dontrun{
  raw_file <- "20170130.PSX_ITCH_50"
  get_orders(raw_file)
  # turn off the feedback from the reading process
  get_orders(raw_file, quiet = TRUE)

  # load only the message 20, 21, 22 (index starts at 1)
  get_orders(raw_file, startMsgCount = 20, endMsgCount = 22)
}

\dontrun{
  # .gz files will be automatically unzipped
  gz_file <- "20170130.PSX_ITCH_50.gz"
  get_orders(gz_file)
  get_orders(gz_file, quiet = TRUE)
  
  # a message count can be provided for slightly faster reads
  msg_count <- count_messages(raw_file)
  get_orders(raw_file, msg_count)
}

## read_orders
file <- "20191230.BX_ITCH_50"
read_orders(file)
## read_modifications
file <- "20191230.BX_ITCH_50"
read_modifications(file)
## read_trades
file <- "20191230.BX_ITCH_50"
read_trades(file)
## read_system_events
file <- "20191230.BX_ITCH_50"
read_system_events(file)
## read_stock_directory
file <- "20191230.BX_ITCH_50"
read_stock_directory(file)
read_stock_directory(file, add_descriptions = TRUE)
}
